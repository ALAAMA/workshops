# -*- eval: (save-excursion (org-babel-goto-named-src-block "workshopPreamble") (org-babel-execute-src-block)) -*-
#+TITLE:     Introduction to R Graphics with =ggplot2=
#+AUTHOR:    
#+EMAIL:     izahn@iq.harvard.edu
#+DATE:      

# NOTE: refer to the README file if you are unfamiliar with emacs or orgmode.

# Customize the PROPERTY and EXCLUDE_TAGS below depending on the type
# of export (see the README file for details). After setting the exports 
# property and/or the EXCLUDE_TAGS, place the curser on the poperty line 
# and press C-c C-c

#+PROPERTY: exports both
#+EXCLUDE_TAGS: noexport mitsetup









#+SETUPFILE: ../workshopPreamble.org

#+name: setUp
#+begin_src R :results silent :exports none :tangle no
  rm(list=ls())
  .First <- function() {
    options(width=70)
    options(useFancyQuotes=FALSE)
    options(show.signif.stars=FALSE)
    options(scipen = 10)
    options(digits = 3)
    require(ascii)
    require(xtable)
    require(ggplot2)
    require(scales)
    require(reshape2)
    require(plyr)
    theme_set(theme_bw())
    png <<- function(res=96, width=500, height=300, ...) grDevices::png(res=res, width=width, height=height, ...)
  }
#+end_src

#+name: workshopPreamble
#+begin_src emacs-lisp :exports none :results silent :tangle no
  (set (make-local-variable 'org-confirm-babel-evaluate) nil)
  (load-file "../setupEnvironment.el")
#+end_src

* Introduction

** Materials and setup						   :setup:

Lab computer users: Log in using the user name and password on the board to your left.

Everyone should have R installed--if not:

- Open a web browser and go to [[http://cran.r-project.org]] and download and install it.
- Also helpful to install RStudo (download from [[http://rstudio.com]]).
- In R, type =install.packages("ggplot2")= to install the ggplot2 package.

Materials for this workshop include slides, example data sets, and example code.

- Download materials from [[http://tutorials.iq.harvard.edu/R/Rgraphics.zip]]
- Extract the zip file containing the materials to your desktop.

Workshop notes are available in .hmtl format. Open a file browser, navigate to your desktop and open Rgraphics.html


** Copy the workshop materials to your home directory		   :mitsetup:
- *Log in to an Athena workstation* using your Athena user name and password.
- *Click on the "Ubuntu" button* on the upper-left and type "term" as shown below.

 [[./images/OpenTerminal.png]]
- *Click on the "Terminal" icon* as shown above
- In the terminal, *type this line exactly as shown*:
: cd; wget j.mp.r-grphics; unzip r-graphics
- If you see "ERROR 404: Not Found", then you mistyped the command -- try again, making sure to type the command exactly as shown.

** Launch RStudio on Athena					   :mitsetup:
- To start R *type these commands in the terminal*:
:     add r
:     rstudio
- Open up today's R script
  - In RStudio, Go to *File => Open Script*
  - Locate and open the =Rgraphics.R= script in the Rgraphics folder in your home directory
- Go to *Tools => Set working directory => To source file location* (more on the working directory later)
- I encourage you to add your own notes to this file!

** Workshop Overview

Class Structure and Organization:
- Ask questions at any time. Really!
- Collaboration is encouraged
- This is your class! Special requests are encouraged

This is an intermediate R course:
- Assumes working knowledge of R
- Relatively fast-paced
- Focus is on =ggplot2= graphics--other packages will not be covered


** Starting A The End
My goal: by the end of the workshop you will be able to reproduce this graphic from the Economist:

[[file:images/Economist1.png]]

** Why =ggplot2=?
Advantages of ggplot2
- consistent underlying =grammar of graphics= (Wilkinson, 2005)
- plot specification at a high level of abstraction
- very flexible
- theme system for polishing plot appearance
- mature and complete graphics system
- many users, active mailing list

That said, there are some things you cannot (or should not) do With ggplot2:
- 3-dimensional graphics (see the rgl package)
- Graph-theory type graphs (nodes/edges layout; see the igraph package)
- Interactive graphics (see the ggvis package)

** What Is The Grammar Of Graphics?

The basic idea: independently specify plot building blocks and combine them to create just about any kind of graphical display you want. Building blocks of a graph include:
- data
- aesthetic mapping
- geometric object
- statistical transformations
- scales
- coordinate system
- position adjustments
- faceting

** The structure of a =ggplot=

The =ggplot()= function is used to initialize the basic graph structure, then we add to it. The structure of a ggplot looks like this:

#+name: ggplotIntro
#+begin_src R :eval never :exports code :tangle no
  ggplot(data = <default data set>, 
         aes(x = <default x axis variable>,
             y = <default y axis variable>,
             ... <other default aesthetic mappings>),
         ... <other plot defaults>) +
             
         geom_<geom type>(aes(size = <size variable for this geom>, 
                        ... <other aesthetic mappings>),
                    data = <data for this point geom>,
                    stat = <statistic string or function>,
                    position = <position string or function>,
                    color = <"fixed color specification">,
                    <other arguments, possibly passed to the _stat_ function) +
                        
    scale_<aesthetic>_<type>(name = <"scale label">,
                       breaks = <where to put tick marks>,
                       labels = <labels for tick marks>,
                       ... <other options for the scale>) +
                           
    theme(plot.background = element_rect(fill = "gray"),
          ... <other theme elements>)
#+end_src

Don't be afraid, you will understand this by the end of the workshop! The basic idea is that you specify different parts of the plot, and add them together using the =+= operator.

** Example data I: =mtcars=

#+name: mtcars1
#+begin_src R
  head(mtcars); cat(".\n.\n.\n"); tail(mtcars)
#+end_src

#+RESULTS: mtcars1
#+begin_example
> head(mtcars); cat(".\n.\n.\n"); tail(mtcars)
                   mpg cyl disp  hp drat   wt qsec vs am gear carb
Mazda RX4         21.0   6  160 110 3.90 2.62 16.5  0  1    4    4
Mazda RX4 Wag     21.0   6  160 110 3.90 2.88 17.0  0  1    4    4
Datsun 710        22.8   4  108  93 3.85 2.32 18.6  1  1    4    1
Hornet 4 Drive    21.4   6  258 110 3.08 3.21 19.4  1  0    3    1
Hornet Sportabout 18.7   8  360 175 3.15 3.44 17.0  0  0    3    2
Valiant           18.1   6  225 105 2.76 3.46 20.2  1  0    3    1
.
.
.
                mpg cyl  disp  hp drat   wt qsec vs am gear carb
Porsche 914-2  26.0   4 120.3  91 4.43 2.14 16.7  0  1    5    2
Lotus Europa   30.4   4  95.1 113 3.77 1.51 16.9  1  1    5    2
Ford Pantera L 15.8   8 351.0 264 4.22 3.17 14.5  0  1    5    4
Ferrari Dino   19.7   6 145.0 175 3.62 2.77 15.5  0  1    5    6
Maserati Bora  15.0   8 301.0 335 3.54 3.57 14.6  0  1    5    8
Volvo 142E     21.4   4 121.0 109 4.11 2.78 18.6  1  1    4    2
> 
#+end_example

These data come from Motor Trend magazine; most of the variable names are intuitive, but here is a variable key just in case.

| Variable | Description                              |
|----------+------------------------------------------|
| mpg	   | Miles/(US) gallon			      |
| cyl	   | Number of cylinders		      |
| disp	   | Displacement (cu.in.)		      |
| hp	   | Gross horsepower			      |
| drat	   | Rear axle ratio			      |
| wt	   | Weight (lb/1000)			      |
| qsec	   | 1/4 mile time			      |
| vs	   | V/S				      |
| am	   | Transmission (0 = automatic, 1 = manual) |
| gear	   | Number of forward gears		      |
| carb	   | Number of carburetors		      |
|----------+------------------------------------------|

** =ggplot2= VS Base Graphics
Compared to base graphics, =ggplot2=
- is more verbose for simple / canned graphics
- is less verbose for complex / custom graphics
- does not have methods (data should always be in a =data.frame=)
- uses a different system for adding plot elements

** =ggplot2= VS Base for simple graphs

Base graphics histogram example:

#+name: baseHist1
#+begin_src R :results graphics :file images/baseHist1.png 
  hist(mtcars$mpg)

#+end_src


#+RESULTS: baseHist1
[[file:images/baseHist1.png]]

=ggplot2= histogram example:

#+name: ggplotHist1
#+begin_src R :results graphics :file images/ggplotHist1.png 
  ggplot(mtcars, aes(x = mpg)) +
    geom_histogram(binwidth = 5)
#+end_src


#+RESULTS: ggplotHist1
[[file:images/ggplotHist1.png]]
Base wins!

** =ggplot2= Base graphics VS =ggplot= for more complex graphs:

Base colored scatter plot example:

#+name: baseComplex1
#+begin_src R :results graphics :file images/baseComplex1.png 
  par(mar = c(4,4,.1,.1))
  plot(mpg ~ hp,
       data=subset(mtcars, am==1),
       xlim=c(50, 450),ylim=c(5, 40))
  points(mpg ~ hp, col="red",
         data=subset(mtcars, am==0))
  legend(350, 40,
         c("1", "0"), title="am",
         col=c("black", "red"),
         pch=c(1, 1))
#+end_src


#+RESULTS: baseComplex1
[[file:images/baseComplex1.png]]

=ggplot2= colored scatter plot example:

#+name: ggplotComplex1
#+begin_src R :results graphics :file images/ggplotComplex1.png
  ggplot(mtcars, aes(x=hp,
                y=mpg,
                color=factor(am)))+
  geom_point()
#+end_src


#+RESULTS: ggplotComplex1
[[file:images/ggplotComplex1.png]]

 
=ggplot2=  wins!

* Geometric Objects And Aesthetics

** Aesthetic Mapping
In ggplot land /aesthetic/ means "something you can see". Examples include:
- position (i.e., on the x and y axes)
- color ("outside" color)
- fill ("inside" color)
- shape (of points)
- linetype
- size

Each type of geom accepts only a subset of all aesthetics--refer to the geom help pages to see what mappings each geom accepts. Aesthetic mappings are set with the =aes()= function.

** Geometic Objects (=geom=)
Geometric objects are the actual marks we put on a plot. Examples include:
- points (=geom_point=, for scatter plots, dot plots, etc)
- lines (=geom_line=, for time series, trend lines, etc)
- boxplot (=geom_boxplot=, for, well, boxplots!)
A plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the =+= operator

You can get a list of available geometric objects using the code below:
#+name: getListOfGeoms
#+begin_src R :eval no
  help.search("geom_", package = "ggplot2")
#+end_src
or simply type =geom_<tab>= in any good R IDE (such as Rstudio or ESS) to see a list of functions starting with =geom_=.

** Points (Scatterplot)
Now that we know about geometric objects and aesthetic mapping, we can make a ggplot. =geom_point= requires mappings for x and y, all others are optional.

#+name: ourFirstScatterplot
#+begin_src R :results output graphics :file images/firstScatter.png 
  ggplot(mtcars, aes(x = hp, y = mpg)) +
    geom_point()
#+end_src


#+RESULTS: ourFirstScatterplot
[[file:images/firstScatter.png]]

Remember that =ggplot()= only sets defaults--we can override these.

#+name: OverRideScatterplotDefault
#+begin_src R :results output graphics :file images/overrideScatterDefault.png 
  ggplot(mtcars, aes(x = hp, y = mpg)) +
    geom_point(aes(y=log10(mpg)))
#+end_src


#+RESULTS: OverRideScatterplotDefault
[[file:images/overrideScatterDefault.png]]

** Lines (Prediction Line)
A plot constructed with =ggplot= can have more than one geom. Our =hp= vs =mpg= plot could use a regression line:

#+name: multipleLayers
#+begin_src R :results output graphics :file images/mtcarsLayers.png 
  mtcars$pred.mpg <- predict(lm(mpg ~ hp, data = mtcars))
  
  p1 <- ggplot(mtcars, aes(x = hp, y = mpg))
  
  p1 + geom_point(aes(color = wt)) +
    geom_line(aes(y = pred.mpg))
#+end_src


#+RESULTS: multipleLayers
[[file:images/mtcarsLayers.png]]

** Smoothers 
Not all geometric objects are simple shapes--the smooth geom includes a line and a ribbon.

#+name: multipleLayers2
#+begin_src R :results output graphics :file images/mtcarsLayers2.png 
  p2 <- ggplot(mtcars, aes(x = hp, y = mpg))
  
  p2 + geom_point(aes(color = wt)) +
    geom_smooth()
#+end_src


#+RESULTS: multipleLayers2
[[file:images/mtcarsLayers2.png]]

** Text (Label Points)
Each =geom= accepts a particualar set of mappings--for example =geom_text()= accepts a =labels= mapping.

#+name: textGeomMapping2
#+begin_src R :results output graphics :file images/textGeomMapping.png 
  p2 + geom_point(aes(color = wt)) +
    geom_smooth() +
    geom_text(aes(label=rownames(mtcars)), size=2)
#+end_src


#+RESULTS: textGeomMapping2
[[file:images/textGeomMapping.png]]

** Aesthetic Mapping VS Assignment
Note that variables are mapped to aesthetics with the =aes()= function, while fixed aesthetics are set outside the =aes()= call. This sometimes leads to confusion, as in this example:

#+name: mtcarsMapping
#+begin_src R :results output graphics :file images/mtcars2.png 
  ggplot(mtcars, aes(x = hp, y = mpg)) +
    geom_point(aes(size = 2),# incorrect! 2 is not a variable
               color="red") # this is fine -- all points red
#+end_src


#+RESULTS: mtcarsMapping
[[file:images/mtcars2.png]]

** Mapping Variables To Other Aesthetics 
Other aesthetics are mapped in the same way as x and y in the previous example.

#+name: colorAndSizeAes
#+begin_src R :results output graphics :file images/addColorAndShapeMapping.png 
  ggplot(mtcars, aes(x = hp, y = mpg)) +
    geom_point(aes(color=wt, shape = factor(am)))
#+end_src


#+RESULTS: colorAndSizeAes
[[file:images/addColorAndShapeMapping.png]]

** Exercise I

1. Create a scatter plot with displacement on the =x= axis and horse power on the y axis.
2. Color the points in the previous plot blue.
3. Color the points in the previous plot according to miles per gallon.


* Statistical Transformations

** Statistical Transformations
Some plot types (such as scatterplots) do not require transformations--each point is plotted at x and y coordinates equal to the original value. Other plots, such as boxplots, histograms, prediction lines etc. require statistical transformations:
- for a boxplot the y values must be transformed to the median and 1.5(IQR)
- for a smoother smother the y values must be transformed into predicted values

Each =geom= has a default statistic, but these can be changed. For example, the default statistic for =geom_bar= is =stat_bin=:
#+name: geomHistorgramArgs
#+begin_src R
  args(geom_bar)
  # ?stat_bin
#+end_src

#+RESULTS: geomHistorgramArgs
#+begin_example
> args(geom_bar)
function (mapping = NULL, data = NULL, stat = "bin", position = "stack", 
    ...) 
NULL
> # ?stat_bin
> 
#+end_example

** Setting Statistical Transformation Arguments
Arguments to =stat_= functions can be passed through =geom_= functions. This can be slightly annoying because in order to change it you have to first determine which stat the geom uses, then determine the arguments to that stat. 

For example, here is the default histogram of miles per gallon:
#+name: GeomBinDefaults
#+begin_src R :results output graphics :file images/GeomBinDefaults.png 
  ggplot(mtcars, aes(x = mpg)) +
    geom_bar()
#+end_src


#+RESULTS: GeomBinDefaults
[[file:images/GeomBinDefaults.png]]
As you can see the default binwidth is too narrow, resulting in too many gaps between the bars. We can fix it by passing the =binwidth= argument to the =stat_bin= function:
#+name: ChangeStatBinArgs
#+begin_src R :results output graphics :file images/ChangeStatBinArgs.png 
  ggplot(mtcars, aes(x = mpg)) +
    geom_bar(stat = "bin", binwidth=4)
#+end_src


#+RESULTS: ChangeStatBinArgs
[[file:images/ChangeStatBinArgs.png]]
If you're thinking to yourself "this is crazy, there must be a better way" you can construct the same plot using =stat_bin= in place of geom_bar, like this:
#+name: ChangeStatBinArgs2
#+begin_src R :results output graphics :file images/ChangeStatBinArgs2.png 
  ggplot(mtcars, aes(x = mpg)) +
    stat_bin(binwidth=4, geom="bar")
#+end_src

#+RESULTS: ChangeStatBinArgs2
[[file:images/ChangeStatBinArgs2.png]]

but I prefer to construct my layers with =geom_= calls rather than =stat_= calls.

** Changing The Statistical Transformation
Sometimes the default statistical transformation is not what you need. This is often the case with pre-summarized data:
#+name: summarizeMTC
#+begin_src R
    (mtc.sum <- aggregate(mtcars["mpg"], mtcars["gear"], FUN=mean))
#+end_src

#+RESULTS: summarizeMTC
#+begin_example
> (mtc.sum <- aggregate(mtcars["mpg"], mtcars["gear"], FUN=mean))
  gear  mpg
1    3 16.1
2    4 24.5
3    5 21.4
> 
#+end_example

#+begin_src R :eval no
  ggplot(mtc.sum, aes(x=gear, y=mpg)) + 
    geom_bar()
#+end_src

#+begin_example
> ggplot(mtc.sum, aes(x=gear, y=mpg)) + 
    geom_bar()
Mapping a variable to y and also 
using stat="bin".
Error in pmin(y, 0) : object 
'y' not found
#+end_example

What is the problem with the previous plot? Basically we take binned and summarized data and ask ggplot to bin and summarize it again (remember, =geom_bar= defaults to =stat = stat_bin=); obviously this will not work. We can fix it by telling =geom_bar= to use a different statistical transformation function:
#+name: BarPlotSum1
#+begin_src R :results output graphics :file images/ChangeStat.png 
  ggplot(mtc.sum, aes(x=gear, y=mpg)) + 
    geom_bar(stat="identity")
#+end_src


#+RESULTS: BarPlotSum1
[[file:images/ChangeStat.png]]

** Exercise II

1. Create boxplots of mpg by gear
2. Overlay points on top of the box plots
3. Create a scatter plot of weight vs. horsepower
4. Overlay a linear regression line on top of the scatter plot

* Scales

** Scales: Controlling Aesthetic Mapping
In =ggplot2= *scales* include
- position
- color and fill
- size
- shape
- line type
Scales are modified with a series of functions using a =scale_<aesthetic>_<type>= naming scheme. Try typing =scale_<tab>= to see a list of scale modification functions.

** Common Scale Arguments
The following arguments are common to most scales in ggplot2:
- name :: the first argument gives the axis or legend title
- limits :: the minimum and maximum of the scale
- breaks :: the points along the scale where labels should appear
- labels :: the labels that appear at each break

Specific scale functions may have additional arguments; for example, the =scale_color_continuous= function has arguments =low= and =high= for setting the colors at the low and high end of the scale.

** Scale Modification Examples

Start by constructing a dotplot showing the distribution of ~mpg~ by ~wt~ and ~gear~.

#+name: modifyScales1
#+begin_src R :results output graphics :file images/modifyScales1.png 
  p6 <- ggplot(mtcars, aes(x = factor(gear), y = mpg))
  (p7 <- p6 + geom_point(aes(color = wt)))
#+end_src


#+RESULTS: modifyScales1
[[file:images/modifyScales1.png]]

Now modify the breaks and labels for the x axis and color scales

#+name: modifyScales2
#+begin_src R :results output graphics :file images/modifyScales2.png  
  p7 + scale_x_discrete("Number of Gears",
                        breaks = c("3", "4", "5"),
                        labels = c("Three", "Four", "Five")) +
       scale_color_continuous("Weight",
                              breaks = with(mtcars, c(min(wt), median(wt), max(wt))),
                              labels = c("Light", "Medium", "Heavy"))
#+end_src


#+RESULTS: modifyScales2
[[file:images/modifyScales2.png]]

Next change the low and high values to different shades of gray:
#+name: modifyScales3
#+begin_src R :results output graphics :file images/modifyScales3.png 
  p7 + scale_color_continuous("Weight",
                           breaks = with(mtcars, c(min(wt), median(wt), max(wt))),
                           labels = c("Light", "Medium", "Heavy"),
                           low = "black",
                           high = "gray80")
#+end_src


#+RESULTS: modifyScales3
[[file:images/modifyScales3.png]]

** Using different color scales
ggplot2 has a wide variety of color scales; here is an example using =scale_color_gradient2= to interpolate between three different colors.
#+name: modifyScales4
#+begin_src R :results output graphics :file images/modifyScales4.png 
  p7 + scale_color_gradient2("Weight",
                            breaks = with(mtcars, c(min(wt), median(wt), max(wt))),
                            labels = c("Light", "Medium", "Heavy"),
                            low = "blue",
                            mid = "black",
                            high = "red",
                            midpoint = median(mtcars$wt))
#+end_src


#+RESULTS: modifyScales4
[[file:images/modifyScales4.png]]

** One more example: modify the size scale
Start by mapping something to size:
#+name: modifyScales5
#+begin_src R :results output graphics :file images/modifyScales5.png 
  (p8 <- p6 + geom_point(aes(size = wt), shape = 1))
#+end_src


#+RESULTS: modifyScales5
[[file:images/modifyScales5.png]]

Now modify the range of the point sizes to make the differences in weight more pronounced:
#+name: modifyScales6
#+begin_src R :results output graphics :file images/modifyScales6.png 
  p8 +
    scale_size_continuous("Weight",
                          range = c(1, 10))
#+end_src


#+RESULTS: modifyScales6
[[file:images/modifyScales6.png]]

** Available Scales
- Partial combination matrix of available scales
| *Scale*         | *Types*    | *Examples*               |
|-----------------+------------+--------------------------|
| scale_color_    | identity   | scale_fill_continuous    |
| scale_fill_     | manual     | scale_color_discrete     |
| scale_size_     | continuous | scale_size_manual        |
|                 | discrete   | scale_size_discrete      |
|                 |            |                          |
| scale_shape_    | discrete   | scale_shape_discrete     |
| scale_linetype_ | identity   | scale_shape_manual       |
|                 | manual     | scale_linetype_discrete  |
|                 |            |                          |
| scale_x_        | continuous | scale_x_continuous       |
| scale_y_        | discrete   | scale_y_discrete         |
|                 | reverse    | scale_x_log              |
|                 | log        | scale_y_reverse          |
|                 | date       | scale_x_date             |
|                 | datetime   | scale_y_datetime         |

** Exercise III
Start with the =p6= plot defined in the previous section. 

1) Add a points layer, mapping =qsec= to an aesthetic other than color.
2) Modify the scale of the aesthetic mapped to qsec by changing the label and at least one other aspect of the scale.


* Faceting

** Faceting
- Faceting is =ggplot2= parlance for *small multiples*
- The idea is to create separate graphs for subsets of data
- =ggplot2= offers two functions for creating small multiples:
 1. =facet_wrap()=: define subsets as the levels of a single grouping variable
 2. =facet_grid()=: define subsets as the crossing of two grouping variables
- Facilitates comparison among plots, not just of geoms within a plot
    
** Example Data II: =Housing prices=
The =mtcars= data we've been using is not very good for showing the power of faceting--let's look at housing prices instead.
#+name: housingData
#+begin_src R
  housing <- read.csv("dataSets/landdata-states.csv")
  head(housing[1:5])
#+end_src

#+RESULTS: housingData
#+begin_example
> housing <- read.csv("dataSets/landdata-states.csv")
> head(housing[1:5])
  State  Date Home.Value Structure.Cost Land.Value
1    AL 19751      24648          23416       1232
2    AL 19752      24970          23721       1248
3    AL 19753      25342          24075       1267
4    AL 19754      25779          24490       1289
5    AL 19761      26343          25026       1317
6    AL 19762      26981          25631       1349
> 
#+end_example

(Data from https://www.lincolninst.edu/subcenters/land-values/land-prices-by-state.asp)

** What is the trend in housing prices?
- Start by using a technique we already know--map State to color:
#+name: housingscatter
#+begin_src R :results output graphics :file images/housing1.png 
  p8 <- ggplot(housing, aes(x = Date, y = Home.Value))
  p8 + geom_line(aes(color = State))  
#+end_src


#+RESULTS: housingscatter
[[file:images/housing1.png]]

There are two problems here--there are too many states to distinguish each one by color, and the lines obscure one another.

** Faceting to the rescue
We can remedy the deficiencies of the previous plot by faceting by state rather than mapping state to color.

#+name: housingscatter2
#+begin_src R :results output graphics :file images/housing2.png :width 800 :height 650
  p8 + geom_line() +
      facet_wrap(~State, ncol = 10)
#+end_src


#+RESULTS: housingscatter2
[[file:images/housing2.png]]

There is also a ~facet_grid()~ function for faceting in two dimensions.

* Themes

** Themes
The ~ggplot2~ theme system handles non-data plot elements such as
- Axis labels
- Plot background
- Facet label backround
- Legend appearance
Built-in themes include:
  - ~theme_gray()~ (default)
  - ~theme_bw()~
  - ~theme_classc()~

** Overriding theme defaults
Specific theme elements can be overridden using ~theme()~. For example:
#+name: opts
#+begin_src R :results output graphics :file images/opts.png 
    p7 + theme(plot.background = element_rect(
                fill = "blue",
                colour = "gray40"))
#+end_src


#+RESULTS: opts
[[file:images/opts.png]]

You can see available options by printing ~theme_gray()~ or ~theme_bw()~

** Creating and saving new themes
You can create new themes, as in the following example:

#+name: themes
#+begin_src R :results output graphics :file images/themes.png 
  theme_new <- theme_bw() +
    theme(text=element_text(size = 12, family = ""),
          axis.text.x = element_text(colour = "red"),
          panel.background = element_rect(fill = "pink"))
  
  p7 + theme_new
#+end_src



#+RESULTS: themes
[[file:images/themes.png]]

* The #1 FAQ
** Map Aesthetic To Different Columns
The most frequently asked question goes something like this: /I have two variables in my data.frame, and I'd like to plot them as separate points, with different color depending on which variable it is. How do I do that?/
*** Wrong
#+name: WrongWayNoMelt
#+begin_src R :results output graphics :file images/WrongWayNoMelt.png 
  ggplot(mtcars, aes(x=wt)) +
    geom_point(aes(y=disp), color="red") +
    geom_point(aes(y=hp), color="blue")
  
  
  #
#+end_src



#+RESULTS: WrongWayNoMelt
[[file:images/WrongWayNoMelt.png]]

*** Right
#+name: meltingDataExe
#+begin_src R :results output graphics :file images/meltingDataExe.png 
  library(reshape2)
  mtc.m <- melt(mtcars,
                measure.vars=c("disp", 
                               "hp"))
  ggplot(mtc.m,
         aes(x=wt,
             y=value,
             color=variable)) +
    geom_point()
#+end_src



#+RESULTS: meltingDataExe
[[file:images/meltingDataExe.png]]

* Putting It All Together

** Challenge: Recreate This =Economist= Graph

[[file:images/Economist1.pdf]]

- Data
The data is available in the ~dataSets/EconomistData.csv~ file. Read it in with ~dat <- read.csv("dataSets/EconomistData.csv")~
Original sources are

  http://www.transparency.org/content/download/64476/1031428
  http://hdrstats.undp.org/en/indicators/display_cf_xls_indicator.cfm?indicator_id=103106&lang=en

- Graph source: 

http://www.economist.com/node/21541178

** Data Prep 							  :noexport:

1. Download, extract, and load data

Use spreadsheet program to export the data to .csv, import .csv to R

#+name: saveEconCsvData
#+begin_src R :results silent :exports code :tangle no :cache yes
  options(stringsAsFactors=FALSE)  
  cpi.dat <- read.csv("dataSets/CPIdata.csv")
  hdi.dat <- read.csv("dataSets/HDIdata.csv")
  dat <- merge(hdi.dat, cpi.dat, by = "Country")
  write.csv(dat, file = "dataSets/EconomistData.csv")
#+end_src

** Challenge data
1. Load the data:
#+name: loadEconCsvData
#+begin_src R :results silent :exports code
  dat <- read.csv("dataSets/EconomistData.csv")
#+end_src

2. Recreate this graph:
[[file:images/Economist1.png]]

* Exercise solutions
** Exercise I prototype 					   :prototype:

#+name: ex1Prototype
#+begin_src R :exports code
  # 1. Create a scatter plot with displacement on the =x= axis and horse power on the y axis.
  (p.ex1 <- ggplot(mtcars, aes(x = disp, y = hp)) + geom_point())
  # 2. Color the points in the previous plot blue.
  p.ex1 + geom_point(color = "blue")
  # 3. Color the points in the previous plot according to miles per gallon.
  p.ex1 + geom_point(aes(color = mpg))
#+end_src

#+RESULTS: ex1Prototype
#+begin_example
> # 1. Create a scatter plot with displacement on the =x= axis and horse power on the y axis.
> (p.ex1 <- ggplot(mtcars, aes(x = disp, y = hp)) + geom_point())
> # 2. Color the points in the previous plot blue.
> p.ex1 + geom_point(color = "blue")
> # 3. Color the points in the previous plot according to miles per gallon.
> p.ex1 + geom_point(aes(color = mpg))
> 
#+end_example


** Exercise II Prototype					  :prototype:
#+name: Exercise2Prototype
#+begin_src R :exports code
                                          #Ex2.1
  (p <- ggplot(mtcars, aes(x = factor(gear), y = mpg)) + geom_boxplot())
                                          #Ex2.2
  p + geom_point()
                                          #Ex2.3
  (p <- ggplot(mtcars, aes(x = wt, y = hp)) + geom_point())
                                          #Ex2.4
  p + geom_smooth(method = "lm")
#+end_src

#+RESULTS: Exercise2Prototype
#+begin_example
>                                         #Ex3.1
> (myplot <- p6 + geom_point(aes(alpha = qsec)))
>                                         #Ex3.2
> myplot + scale_alpha_continuous(range = c(.5, 1))
> 
#+end_example


** Exercise III Prototype                                         :prototype:
#+name: Exercise3Prototype
#+begin_src R :exports code
                                          #Ex3.1
  (myplot <- p6 + geom_point(aes(alpha = qsec)))
                                          #Ex3.2
  myplot + scale_alpha_continuous(range = c(.5, 1))
#+end_src



** Challenge Solution						  :prototype:

Create basic scatter plot

#+name: econDatScatter
#+begin_src R :results output graphics :file images/econScatter1.png 
    pc1 <- ggplot(dat, aes(x = CPI, y = HDI, color = Region))
    (pc1 <- pc1 + geom_point(shape = 1))
    
    
   
  
  #
#+end_src


#+RESULTS: econDatScatter
[[file:images/econScatter1.png]]

** Challenge Solution						  :prototype:

Add labels

#+name: econDatScatter2
#+begin_src R :results output graphics :file images/econScatter2.png 
  label.these <- c("Congo", "Sudan", "Afghanistan", "Greece", "China",
                   "India", "Rwanda", "Spain", "France", "United States",
                   "Japan", "Norway", "Singapore")
  (pc2 <- pc1 +
   geom_text(aes(label = Country),
             color = "black", size = 3, hjust = 1.1,
             data = dat[dat$Country %in% label.these, ]))
#+end_src


#+RESULTS: econDatScatter2
[[file:images/econScatter2.png]]

** Challenge Solution						  :prototype:

 Add smoothing line

#+name: econDatScatter3
#+begin_src R :results output graphics :file images/econScatter3.png 
  (pc3 <- pc2 +
   geom_smooth(aes(group = 1),
               method = "lm",
               color = "black",
               formula = y~ poly(x, 2),
               se = FALSE))
#
#+end_src


#+RESULTS: econDatScatter3
[[file:images/econScatter3.png]]

** Challenge Solution						  :prototype:

Finishing touches

#+name: econDatScatter4
#+begin_src R :results output graphics :file images/econScatter4.png :width 800 :height 400
  (pc4 <- pc3 + theme_bw() +
    scale_x_continuous("Corruption Perceptions Index, 2011\n(10 = least corrupt)") +
    scale_y_continuous("Human Development Index, 2011\n(1 = best)") +
    theme(legend.position = "top", legend.direction = "horizontal"))
#+end_src

#+RESULTS: econDatScatter4
[[file:images/econScatter4.png]]



* Wrap-up

** Help Us Make This Workshop Even Better!
- Please take a moment to fill out a very short feedback form 
- These workshops exist for you -- tell us what you need! 
- http://tinyurl.com/R-graphics-feedback

** Additional resources
- ggplot2 resources
  - Mailing list: http://groups.google.com/group/ggplot2
  - Wiki: https://github.com/hadley/ggplot2/wiki
  - Website: http://had.co.nz/ggplot2/
  - StackOverflow: http://stackoverflow.com/questions/tagged/ggplot
- IQSS resources
  - Research technology consulting: [[http://projects.iq.harvard.edu/rtc]]
  - Workshops: http://projects.iq.harvard.edu/rtc/filter_by/workshops

